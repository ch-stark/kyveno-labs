#!/usr/bin/env bash

#set -euo pipefail

[[ -n "${BEARER_TOKEN}" ]] || { BEARER_TOKEN="";}

# Helper method to call curl command to quay
function quay_curl {
  if [[ "$BEARER_TOKEN" == "" ]]
    then
      curl -sS --fail -s "https://quay.io/api/v1/repository/${1}"
    else
      curl -sS --fail -H "Authorization: Bearer ${BEARER_TOKEN}" -s -X GET "https://quay.io/api/v1/repository/${1}"
    fi
}

# Check image scan results in quay.io and alert on new fixable vulns
function get_vulns {
  local image_name=$1
  local image_tag=$2

  echo "Fetching current image SHA from quay for $image_name:$image_tag"
  img_data="$(quay_curl "${image_name}/tag/?specificTag=${image_tag}" | jq -r '.tags | first')"
  if [[ "$(jq -r '.is_manifest_list' <<<"$img_data")" == "true" ]]; then
    img_data="$(quay_curl "${image_name}/tag/?specificTag=${image_tag}-amd64" | jq -r '.tags | first')"
  fi
  CURRENT_IMAGE="$(jq -r '.manifest_digest' <<<"$img_data")"
  if [[ -z "$CURRENT_IMAGE" || "$CURRENT_IMAGE" == "null" ]]; then
    echo >&2 "Tag ${image_tag} could not be found for image ${image_name}"
    FAIL_SCRIPT=true
    return
  fi

  # make sure scan is complete before proceeding.
  local scan_present
  local count=1

  echo "Getting scan status for ${image_name}"
  wait=30
  count=0
  scan_present=$(quay_curl "${image_name}/manifest/${CURRENT_IMAGE}/security?vulnerabilities=true" | jq -r '.status')
  until [ "$scan_present" = "scanned" ] || [ "$count" -gt 400 ]; do
    echo "${count} Waiting ${wait}s for scan to complete..."
    scan_present=$(quay_curl "${image_name}/manifest/${CURRENT_IMAGE}/security?vulnerabilities=true" | jq -r '.status')
    count=$((count+1))
    sleep $wait
  done

  # if scan never completes, print error message, mark image as failed, and move on to the next
  if [ "$scan_present" != "scanned" ]; then
    echo "${image_name}:${image_tag} scan never completed. Check Quay website."
    FAIL_SCRIPT=true
  else
    echo "Getting vulns for ${image_name}"
    CURRENT_FIXABLE=$(quay_curl "${image_name}/manifest/${CURRENT_IMAGE}/security?vulnerabilities=true" | jq '. + {timestamp:(now|todateiso8601)}' | jq '. + {scanner:"quay.io"}')
    echo ${CURRENT_FIXABLE} > scan.json
    echo "Please check the scan.json file!"
  fi
}

FAIL_SCRIPT=false

# check main images
get_vulns ${1} ${2}

# if fixable vulns found, return 1 so CI can fail the job
[ "$FAIL_SCRIPT" = true ] && exit 1 || exit 0
